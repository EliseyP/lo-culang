<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE script:module PUBLIC "-//OpenOffice.org//DTD OfficeDocument 1.0//EN" "module.dtd">
<script:module xmlns:script="http://openoffice.org/2000/script" script:name="Functions" script:language="StarBasic">REM  *****  BASIC  *****
Option Compatible

Dim bDebug as Boolean 				&apos; flag debug output; def=false
Dim UnicodeFont 					&apos; for convertation (f.e. &quot;Ponomar Unicode&quot;)
dim aAllFontsInDoc() as string 		&apos; All fonts founded in document or selected
dim aAvailableOrthodoxFontsInDoc() as string &apos; known orthodox fonts In doc 
dim aKnownOrthodoxFonts() as string &apos; known orthodox fonts for converting 
dim bWasTextSelected as Boolean		&apos; flag if text was selected
dim bConvertOnlySelected as Boolean	&apos; flag 

Sub run_here (Optional oDoc, Optional bGui)
&apos;BasicLibraries.loadLibrary(&quot;XrayTool&quot;)	

&apos; automatically process whole document oDoc
	If IsMissing(oDoc) Then oDoc = ThisComponent
	If IsMissing(bGui) Then bGui = False
	&apos;bDebug = true
	
	UnicodeFont = &quot;Ponomar Unicode&quot; &apos; 
	&apos;UnicodeFont = &quot;Ponomar Unicode TT&quot;
&apos;TODO:
	&apos; check what version installed in system. if both, then use Open Type
	
	&apos; fonts, possible for convertation
	&apos; (all fonts in my folder)
	&apos; $ find . -type f -name &apos;*.odt&apos; | while read i; do zipgrep -o &apos;text-properties style:font-name=&quot;[-A-Za-z0-9 ._]+&quot;&apos; &quot;$i&quot; content.xml; done | sort -u
	aKnownOrthodoxFonts=Array(&quot;Hirmos Ponomar TT&quot;, _
		&quot;Hirmos Ponomar TT1&quot;, _
		&quot;Hirmos Ucs&quot;, _
		&quot;Hirmos Ucs1&quot;, _
		&quot;Irmologion&quot;, _
		&quot;Irmologion Ucs&quot;, _
		&quot;Irmologion Ucs1&quot;, _
		&quot;Irmologion Ucs2&quot;, _
		&quot;Orthodox&quot;, _
		&quot;OrthodoxDigits&quot;, _
		&quot;OrthodoxDigits1&quot;, _
		&quot;OrthodoxDigitsLoose&quot;, _
		&quot;OrthodoxLoose&quot;, _
		&quot;Orthodox_tt eRoos&quot;, _
		&quot;Orthodox.tt eRoos&quot;, _
		&quot;Orthodox.tt eRoos1&quot;, _
		&quot;Orthodox.tt ieERoos&quot;, _
		&quot;Orthodox.tt ieERoos1&quot;, _
		&quot;Orthodox.tt ieUcs8&quot;, _
		&quot;Orthodox.tt ieUcs81&quot;, _
		&quot;Orthodox.tt ieUcs8 Caps&quot;, _
		&quot;Orthodox.tt Ucs8&quot;, _
		&quot;Orthodox.tt Ucs81&quot;, _
		&quot;Orthodox.tt Ucs8 Caps&quot;, _
		&quot;Orthodox.tt Ucs8 Caps tight&quot;, _
		&quot;Orthodox.tt Ucs8 tight&quot;, _
		&quot;Orthodox.tt Ucs8 tight1&quot;, _
		&quot;Triodion ieUcs&quot;, _
		&quot;Triodion Ucs&quot;, _
		&quot;Triodion Ucs1&quot;, _
		&quot;Ustav&quot;, _
		&quot;Ustav1&quot;, _
		&quot;Valaam&quot;, _
		&quot;Valaam1&quot;)	
	
	fnGetAllFonts(oDoc)					&apos; get all dfonts in current document
	fnGetAvailableOrthodoxFonts 		&apos; check, what font available for converting 
	
	If bGui = True Then 
	&apos; GUI-Dialog
		initMainDialog
		if bIsCancelPressed = &quot;True&quot; Then exit sub
		&apos; preserve from pressing Escape, close-win 
		&apos;if bIsConvertPressed = &quot;True&quot; Then
			&apos;if bConvertOnlySelected = &quot;False&quot; Then 
			&apos;	fnSetFontToAllDoc(oDoc, UnicodeFont)	&apos; set Unicode font for whole document 
			&apos;Endif	
			&apos;fnCorrectings(oDoc)							&apos; some post-corrections		
		&apos;End If 
	End If 	
End Sub


sub printDeb(str$)
	If bDebug = true Then print str
End Sub


sub fnGetAllFonts(Optional oDoc)
&apos; get all fonts in document -&gt; to array aAllFontsInDoc()

 	If IsMissing(oDoc) Then oDoc = ThisComponent	

 	Dim oParEnum           &apos;Paragraph enumerator
  	Dim osecEnum           &apos;Text section enumerator
  	Dim oPar               &apos;Current paragraph
  	Dim oParSection        &apos;Current section
  	Dim nPars As Integer   &apos;Number of paragraphs
  	Dim sSecFnt$ 			&apos; font of section
    
	oParEnum = oDoc.Text.createEnumeration()
	&apos; for each paragraph
	Do While oParEnum.hasMoreElements()
	  oPar = oParEnum.nextElement()
	  If oPar.supportsService(&quot;com.sun.star.text.Paragraph&quot;) Then
	    nPars = nPars + 1
	    oSecEnum = oPar.createEnumeration()
	    &apos; for each section
	    Do While oSecEnum.hasMoreElements()
	      oParSection = oSecEnum.nextElement()
	      sSecFnt = oParSection.CharFontName
	      IF sSecFnt &lt;&gt; &quot;&quot; Then
	      	&apos; push if uniq to array aAllFontsInDoc()
	      	fnPushUniqFontToArray(sSecFnt)
	      End If
	    Loop
	  End If
	Loop
End Sub


Sub fnPushUniqFontToArray(sF$)
&apos; push font sF to array aAllFontsInDoc if uniq
 	dim nADim% &apos; dimension of array aAllFontsInDoc
	dim i%
	dim bIsUniq as boolean &apos; is font uniq? 

	bIsUniq = True
	if uBound(aAllFontsInDoc) = -1 Then &apos; empty
		Redim aAllFontsInDoc(0) as string
		aAllFontsInDoc(0) = sF
	Else &apos; non-empty	
		&apos; uniq check
		nADim = uBound(aAllFontsInDoc)
		For i = 0 To nADim
			If sF = aAllFontsInDoc(i) Then 
				bIsUniq = False &apos; have it already 
				Exit For
			End if
		Next
		If  bIsUniq = True Then 
			nADim = nADim+1
			Redim Preserve aAllFontsInDoc(nADim)
			aAllFontsInDoc(nADim) = sF
		End If
	End If
End Sub


sub fnGetAvailableOrthodoxFonts
&apos; analyse array of all fonts - aAllFontsInDoc()
&apos; select orthodox - aAvailableOrthodoxFontsInDoc()
	Dim i%, j%
	Dim FT as FontTableType
	Dim sFont$
   
	For i = 0 To uBound(aAllFontsInDoc)
		&apos; check font - availablity for converting
		For j = 0 To uBound(aKnownOrthodoxFonts)
			sFont = aAllFontsInDoc(i)
			If sFont = aKnownOrthodoxFonts(j) Then
				&apos; push font to array aAvailableOrthodoxFontsInDoc()
				fnPushKnownFontToArray(sFont) 			
				exit For
			End If	
		Next
	Next
End Sub


sub fnPushKnownFontToArray(sF$)
&apos; push font sF to array aAvailableOrthodoxFontsInDoc if uniq
 	dim nADim% 
	dim i%
	dim bIsUniq as boolean &apos; font is uniq?

	bIsUniq = True
	if uBound(aAvailableOrthodoxFontsInDoc) = -1 Then &apos; empty
		Redim aAvailableOrthodoxFontsInDoc(0) as string
		aAvailableOrthodoxFontsInDoc(0) = sF
	Else &apos; non-empty
		&apos; check uniq
		nADim = uBound(aAvailableOrthodoxFontsInDoc)
		For i = 0 To nADim
			If sF = aAvailableOrthodoxFontsInDoc(i) Then 
				bIsUniq = False &apos; we have it already
				Exit For
			End if
		Next
		If  bIsUniq = True Then 
			nADim = nADim+1
			Redim Preserve aAvailableOrthodoxFontsInDoc(nADim)
			aAvailableOrthodoxFontsInDoc(nADim) = sF
		End If
	End If

End Sub


Sub fnCorrectings(Optional oDoc)
	
	Dim oReplace As Object

	Dim rFind$, rReplace
	&apos; find repeating of diacritic sign (in other fonts it not always visible) 
	dim regA
	&apos;s/a{2,}|b{2}|.../.../
	regA = Array(Oxia, Varia, Zvatelce, Kamora, Titlo, Pokrytie, Kendema)
	for i% = 0 to uBound(regA) 
		rFind 		= &quot;(&quot; &amp; regA(i) &amp; &quot;){2,}&quot;
		rReplace 	= &quot;$1&quot;
		
		If IsMissing(oDoc) Then oDoc = ThisComponent
			
		oReplace = oDoc.createReplaceDescriptor
		oReplace.SearchCaseSensitive 		= true
		oReplace.SearchRegularExpression 	= true
		
		oReplace.setSearchString(rFind)
		oReplace.setReplaceString(rReplace)
		oDoc.ReplaceAll(oReplace)
	Next
		
End Sub


Function push(A, s)
	Dim nAdim%
	
	if uBound(A) = -1 Then &apos; empty
		Redim A(0)
		A(0) = s
	Else &apos; non-empty	
		nADim = uBound(A)
		nADim = nADim+1
		Redim Preserve A(nADim)
		A(nADim) = s
	End If
	
	push = A
End Function

Sub run_py(sScript$, sFunction_name$, Optional bParamFlag as Boolean)
&apos; if bParamFlag - pass oDoc to py_script elese sript use XSCRIPTCONTEXT
	Dim oScript
	Dim scriptPro As Object
	Dim oDoc
	Dim sScript_string$
	Dim Param()

	If IsMissing(bParamFlag) Then bParamFlag = False	
	oDoc = ThisComponent
	sScript_string = &quot;vnd.sun.star.script:&quot; &amp; sScript &amp; &quot;$&quot; &amp; sFunction_name &amp; &quot;?language=Python&amp;location=user&quot;

	scriptPro = oDoc.getScriptProvider()
	oScript = scriptPro.getScript(sScript_string)

	if bParamFlag = True Then
		oScript.invoke(Array(oDoc), Array(), Array() )
		&apos;Param = Array(oDoc)
	Else	
		oScript.invoke(Array(), Array(), Array() )
	EndIf
	
End Sub

&apos; oDoc, &quot;onik.py&quot;, &quot;ucs_convert_from_shell&quot;, &quot;True&quot;
sub run_py_from_shell(oDoc, sScript$, sFunction_name$)
	Dim oScript
	Dim scriptPro As Object
	Dim sScript_string$
	
	sScript_string = &quot;vnd.sun.star.script:&quot; &amp; sScript &amp; &quot;$&quot; &amp; sFunction_name &amp; &quot;?language=Python&amp;location=user&quot;

	scriptPro = oDoc.getScriptProvider()
	oScript = scriptPro.getScript(sScript_string)

	oScript.invoke(Array(oDoc), Array(), Array() )
End Sub


Sub run_onik_py(sFunction_name$, Optional bParamFlag as Boolean)
	If IsMissing(bParamFlag) Then bParamFlag = False
	
	run_py(&quot;onik.py&quot;, sFunction_name, bParamFlag)
End Sub
</script:module>